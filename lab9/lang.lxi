
%option noyywrap
%{ 	 
#include <math.h> 
#include <stdio.h>
#include "lang.tab.h"
%} 

DIGIT 		[0-9] 
INTEGER		[1-9][0-9]*|0|[-][1-9][0-9]*
LETTER		[a-zA-Z]
CHARACTER	[']({LETTER}|{DIGIT})[']
WORD		["]({LETTER}|{DIGIT}|[ \t]|[:])*["]
CONSTANT 	{INTEGER}|{WORD}|{CHARACTER}
ID			{LETTER}({LETTER}|{DIGIT})*

%% 
"integer"	{printf("Reserved word: %s\n", yytext); return INTEGER;}
"is"		{printf("Reserved word: %s\n", yytext); return ASSIGNMENT;}
"condition"	{printf("Reserved word: %s\n", yytext); return IF;}
"then"		{printf("Reserved word: %s\n", yytext); return THEN;}
"else"		{printf("Reserved word: %s\n", yytext); return ELSE;}
"character"	{printf("Reserved word: %s\n", yytext); return CHARACTER;}
"charSeq"	{printf("Reserved word: %s\n", yytext); return CHARSEQ;}
"vect"		{printf("Reserved word: %s\n", yytext); return VECTOR;}
"forloop"	{printf("Reserved word: %s\n", yytext); return FOR;}
"read"		{printf("Reserved word: %s\n", yytext); return READ;}
"display"	{printf("Reserved word: %s\n", yytext);return WRITE;}


"+"			{printf("Operator: %s\n", yytext); return PLUS;}
"-"			{printf("Operator: %s\n", yytext); return MINUS;}
"*"			{printf("Operator: %s\n", yytext); return MULTIPLICATION;}
"/" 		{printf("Operator: %s\n", yytext); return REDUCTION;}
"<"			{printf("Operator: %s\n", yytext); return SMALLER;}
">"			{printf("Operator: %s\n", yytext); return BIGGER;}
"<="		{printf("Operator: %s\n", yytext); return SMALLER_OR_EQUAL;}
">="		{printf("Operator: %s\n", yytext); return BIGGER_OR_EQUAL; }
"!="		{printf("Operator: %s\n", yytext); return DIFFERENT; }
"="			{printf("Operator: %s\n", yytext); return EQUAL; }
"<<<"		{printf("Operator: %s\n", yytext); return WRITE_OP; }
">>>"		{printf("Operator: %s\n", yytext); return READ_OP; }

"{"			{printf("Separator: %s\n", yytext); return LEFT_OPEN_BRACKET; }
"}"			{printf("Separator: %s\n", yytext); return RIGHT_OPEN_BRACKET; }
"["			{printf("Separator: %s\n", yytext); return LEFT_SQUARE_PARANTHESIS; }
"]"			{printf("Separator: %s\n", yytext); return RIGHT_SQUARE_PARANTHESIS; }
"("			{printf("Separator: %s\n", yytext); return LEFT_ROUND_PARANTHESIS; }
")"			{printf("Separator: %s\n", yytext); return RIGHT_ROUND_PARANTHESIS; }
";"			{printf("Separator: %s\n", yytext); return SEMICOLON; }
","			{printf("Separator: %s\n", yytext); return COLON; }

{ID}		{printf("Identifier: %s\n", yytext); return IDENTIFIER; }
{INTEGER}	{printf("Constant: %s\n", yytext); return NUMBER; }
{WORD}		{printf("Constant: %s\n", yytext); return WORD; }
{CHARACTER}	{printf("Constant: %s\n", yytext); return CONSTANT_CHAR; }

"{"[^}\n]*"}" 		/* eat up one-line comments */ {}

[ \t\n]+ 		/* eat up whitespace */ {}
		 
.	{printf("Error\n"); return -1;}
%% 

